/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.XuaTypes;import org.intellij.sdk.language.psi.XuaTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Xua.flex</tt>
 */
class XuaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\2\50\1\3\22\0\1\1\1\0\1\51\1\2\3\0\1\46\5\0\1\53\1\100\1\0\1"+
    "\76\1\77\6\101\2\41\7\0\1\36\1\27\1\21\1\45\1\34\1\35\1\55\1\43\1\56\1\60"+
    "\1\61\1\31\1\22\1\37\1\44\1\42\1\57\1\24\1\4\1\32\1\33\1\11\1\62\1\74\1\63"+
    "\1\54\1\0\1\47\2\0\1\40\1\0\1\12\1\65\1\67\1\15\1\7\1\52\1\66\1\23\1\14\1"+
    "\72\1\71\1\13\1\73\1\20\1\17\1\6\1\25\1\10\1\26\1\16\1\5\1\70\1\75\1\102\1"+
    "\30\1\64\12\0\1\50\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\50\5\0\1\1\57\0\1"+
    "\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\27\4\1\5\2\1\11\4"+
    "\1\5\1\1\57\4\2\0\1\6\3\0\20\4\1\0"+
    "\1\7\2\0\1\5\1\4\14\0\1\4\11\0\1\4"+
    "\4\0\1\4\1\0\1\4\4\0\2\4\2\0\1\4"+
    "\3\0\5\4\1\6\20\0\1\10\1\0\1\7\1\11"+
    "\1\0\1\4\27\0\1\4\10\0\1\4\3\0\3\4"+
    "\1\0\1\12\1\4\1\13\1\4\1\14\4\0\1\10"+
    "\1\11\1\15\1\16\2\4\3\0\4\4\1\17\1\0"+
    "\2\4\3\0\1\20\5\4\1\21\1\4\1\22\1\4"+
    "\1\23\1\24\1\4\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d"+
    "\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295"+
    "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad"+
    "\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5"+
    "\0\u0a78\0\u0754\0\103\0\u1708\0\u0797\0\u174b\0\u178e\0\u17d1"+
    "\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u0a78\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee"+
    "\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206"+
    "\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e"+
    "\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636"+
    "\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e"+
    "\0\u2891\0\u28d4\0\u2917\0\u0797\0\u295a\0\u299d\0\u29e0\0\u2a23"+
    "\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b"+
    "\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u1bbe\0\u2d8a\0\u1c44\0\u1c87"+
    "\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2"+
    "\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba"+
    "\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2"+
    "\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea"+
    "\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802"+
    "\0\u3845\0\u3888\0\u03ed\0\u38cb\0\u03ed\0\u390e\0\u03ed\0\u3951"+
    "\0\u3994\0\u39d7\0\u3a1a\0\u2d8a\0\u2dcd\0\u03ed\0\103\0\u3a5d"+
    "\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75"+
    "\0\u03ed\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u03ed"+
    "\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u03ed\0\u3f99\0\u03ed"+
    "\0\u3fdc\0\u03ed\0\u03ed\0\u401f\0\u03ed";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\20\1\26\1\27"+
    "\1\20\1\30\1\31\2\20\1\32\1\20\1\33\1\20"+
    "\1\34\4\20\1\35\1\2\1\3\1\36\1\37\1\2"+
    "\10\20\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\2\20\1\50\1\34\1\51\1\34\1\20\104\0"+
    "\1\3\1\0\1\3\44\0\1\3\32\0\3\4\1\0"+
    "\77\4\4\0\1\20\1\52\40\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\4\0\4\20\1\53\35\20\4\0"+
    "\1\20\1\0\15\20\1\54\6\20\1\0\2\20\4\0"+
    "\6\20\1\55\1\56\2\20\1\57\27\20\4\0\1\20"+
    "\1\0\24\20\1\0\2\20\4\0\1\20\1\60\5\20"+
    "\1\61\2\20\1\62\1\20\1\63\5\20\1\64\17\20"+
    "\4\0\1\20\1\0\24\20\1\0\2\20\4\0\1\20"+
    "\1\65\11\20\1\66\26\20\4\0\1\20\1\0\24\20"+
    "\1\0\2\20\4\0\6\20\1\67\33\20\4\0\1\20"+
    "\1\0\24\20\1\0\2\20\4\0\4\20\1\70\35\20"+
    "\4\0\1\71\1\0\24\20\1\0\2\20\4\0\12\20"+
    "\1\72\27\20\4\0\1\20\1\0\14\20\1\73\7\20"+
    "\1\0\2\20\4\0\11\20\1\74\1\75\7\20\1\76"+
    "\17\20\4\0\1\20\1\0\24\20\1\0\2\20\4\0"+
    "\3\20\1\77\2\20\1\100\1\20\1\101\31\20\4\0"+
    "\1\20\1\0\24\20\1\0\2\20\4\0\3\20\1\55"+
    "\1\102\1\20\1\55\3\20\1\65\4\20\1\103\22\20"+
    "\4\0\1\20\1\0\24\20\1\0\2\20\4\0\42\20"+
    "\4\0\1\20\1\0\24\20\1\0\2\20\4\0\7\20"+
    "\1\104\4\20\1\105\25\20\4\0\1\20\1\0\11\20"+
    "\1\105\12\20\1\0\2\20\4\0\4\20\1\106\17\20"+
    "\1\107\15\20\4\0\1\20\1\0\24\20\1\0\2\20"+
    "\4\0\3\20\1\110\36\20\4\0\1\20\1\0\24\20"+
    "\1\0\2\20\4\0\1\20\1\111\1\20\1\112\1\113"+
    "\3\20\1\55\13\20\1\114\15\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\4\0\3\20\1\115\36\20\4\0"+
    "\1\20\1\0\24\20\1\0\2\20\4\0\6\20\1\55"+
    "\1\116\11\20\1\117\2\20\1\120\15\20\4\0\1\20"+
    "\1\0\14\20\1\121\1\122\3\20\1\123\2\20\1\0"+
    "\2\20\4\0\13\20\1\124\26\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\4\0\10\20\1\125\1\20\1\107"+
    "\27\20\4\0\1\20\1\0\24\20\1\0\2\20\4\0"+
    "\20\20\1\126\21\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\4\0\32\20\1\127\7\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\4\0\27\20\1\130\12\20\4\0"+
    "\1\20\1\0\24\20\1\0\2\20\41\0\1\34\34\0"+
    "\2\34\1\131\1\34\1\0\46\132\1\133\1\134\33\132"+
    "\47\135\1\136\1\135\1\133\31\135\4\0\4\20\1\137"+
    "\1\20\1\140\1\20\1\141\2\20\1\142\26\20\4\0"+
    "\1\20\1\0\24\20\1\0\2\20\4\0\17\20\1\143"+
    "\22\20\4\0\1\20\1\0\24\20\1\0\2\20\4\0"+
    "\3\20\1\144\36\20\4\0\1\20\1\0\12\20\1\145"+
    "\11\20\1\0\2\20\4\0\1\20\1\55\5\20\1\60"+
    "\32\20\4\0\1\20\1\0\24\20\1\0\2\20\4\0"+
    "\6\20\1\60\13\20\1\146\17\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\4\0\10\20\1\147\31\20\4\0"+
    "\1\20\1\0\24\20\1\0\2\20\4\0\6\20\1\150"+
    "\4\20\1\151\1\55\7\20\1\152\15\20\4\0\1\20"+
    "\1\0\15\20\1\152\6\20\1\0\2\20\4\0\6\20"+
    "\1\153\33\20\4\0\1\20\1\0\24\20\1\0\2\20"+
    "\4\0\4\20\1\55\7\20\1\154\5\20\1\155\17\20"+
    "\4\0\1\20\1\0\15\20\1\156\6\20\1\0\2\20"+
    "\41\0\1\34\23\0\1\157\10\0\2\160\1\161\1\160"+
    "\1\162\41\0\1\163\34\0\2\163\1\0\1\163\5\0"+
    "\2\20\1\164\37\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\165\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\166\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\167\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\170\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\171\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\172\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\173\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\174\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\175\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\176\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\177\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\200\24\20\1\0"+
    "\2\20\4\0\7\20\1\201\32\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\4\0\42\20\4\0\1\20\1\202"+
    "\24\20\1\0\2\20\4\0\42\20\4\0\1\20\1\203"+
    "\24\20\1\0\2\20\4\0\42\20\4\0\1\20\1\204"+
    "\24\20\1\0\2\20\4\0\42\20\4\0\1\20\1\205"+
    "\24\20\1\0\2\20\4\0\42\20\4\0\1\20\1\206"+
    "\24\20\1\0\2\20\4\0\42\20\4\0\1\20\1\207"+
    "\24\20\1\0\2\20\4\0\42\20\4\0\1\20\1\210"+
    "\24\20\1\0\2\20\4\0\42\20\4\0\1\20\1\211"+
    "\24\20\1\0\2\20\4\0\42\20\4\0\1\20\1\212"+
    "\24\20\1\0\2\20\4\0\42\20\4\0\1\20\1\0"+
    "\14\20\1\213\7\20\1\0\2\20\4\0\42\20\4\0"+
    "\1\20\1\214\24\20\1\0\2\20\4\0\42\20\4\0"+
    "\1\20\1\215\24\20\1\0\2\20\4\0\42\20\4\0"+
    "\1\20\1\216\24\20\1\0\2\20\4\0\42\20\4\0"+
    "\1\20\1\217\24\20\1\0\2\20\4\0\10\20\1\220"+
    "\31\20\4\0\1\20\1\0\24\20\1\0\2\20\4\0"+
    "\42\20\4\0\1\20\1\221\24\20\1\0\2\20\4\0"+
    "\12\20\1\222\27\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\223\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\224\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\225\24\20\1\0"+
    "\2\20\4\0\42\20\4\0\1\20\1\226\24\20\1\0"+
    "\2\20\4\0\21\20\1\227\1\230\17\20\4\0\1\20"+
    "\1\0\24\20\1\0\2\20\4\0\42\20\4\0\1\20"+
    "\1\231\24\20\1\0\2\20\4\0\42\20\4\0\1\20"+
    "\1\232\24\20\1\0\2\20\4\0\4\20\1\233\35\20"+
    "\4\0\1\20\1\0\24\20\1\0\2\20\4\0\42\20"+
    "\4\0\1\20\1\234\24\20\1\0\2\20\4\0\42\20"+
    "\4\0\1\20\1\235\24\20\1\0\2\20\4\0\42\20"+
    "\4\0\1\20\1\236\24\20\1\0\2\20\4\0\11\20"+
    "\1\237\30\20\4\0\1\20\1\0\24\20\1\0\2\20"+
    "\4\0\12\20\1\240\27\20\4\0\1\20\1\0\24\20"+
    "\1\0\2\20\4\0\27\20\1\241\12\20\4\0\1\20"+
    "\1\0\24\20\1\0\2\20\4\0\25\20\1\242\14\20"+
    "\4\0\1\20\1\0\24\20\1\0\2\20\4\0\25\20"+
    "\1\243\14\20\4\0\1\20\1\0\24\20\1\0\2\20"+
    "\3\132\1\0\44\132\1\0\32\132\47\135\1\136\1\135"+
    "\1\244\31\135\4\0\42\20\4\0\1\20\1\245\24\20"+
    "\1\0\2\20\4\0\42\20\4\0\1\20\1\246\24\20"+
    "\1\0\2\20\4\0\42\20\4\0\1\20\1\247\24\20"+
    "\1\0\2\20\4\0\42\20\4\0\1\20\1\250\24\20"+
    "\1\0\2\20\4\0\42\20\4\0\1\20\1\251\24\20"+
    "\1\0\2\20\4\0\42\20\4\0\1\20\1\252\24\20"+
    "\1\0\2\20\4\0\42\20\4\0\1\20\1\253\24\20"+
    "\1\0\2\20\4\0\42\20\4\0\1\20\1\254\24\20"+
    "\1\0\2\20\4\0\42\20\4\0\1\20\1\255\24\20"+
    "\1\0\2\20\4\0\42\20\4\0\1\20\1\256\24\20"+
    "\1\0\2\20\4\0\42\20\4\0\1\20\1\257\15\20"+
    "\1\55\6\20\1\0\2\20\4\0\42\20\4\0\1\20"+
    "\1\260\24\20\1\0\2\20\4\0\42\20\4\0\1\20"+
    "\1\261\24\20\1\0\2\20\4\0\42\20\4\0\1\20"+
    "\1\262\24\20\1\0\2\20\4\0\42\20\4\0\1\20"+
    "\1\263\24\20\1\0\2\20\4\0\42\20\4\0\1\20"+
    "\1\264\24\20\1\0\2\20\76\0\2\265\1\266\43\0"+
    "\1\34\34\0\2\160\1\161\1\160\42\0\1\163\34\0"+
    "\2\267\1\0\1\267\10\0\1\270\2\0\1\270\2\0"+
    "\1\270\3\0\1\270\5\0\1\270\4\0\3\270\2\0"+
    "\1\270\3\0\1\270\4\0\1\270\12\0\1\270\1\0"+
    "\1\270\6\0\2\270\1\271\1\270\5\0\3\20\1\272"+
    "\36\20\4\0\1\20\1\0\24\20\1\0\2\20\42\0"+
    "\1\273\73\0\1\274\125\0\1\275\66\0\1\276\67\0"+
    "\1\277\12\0\1\300\74\0\1\301\123\0\1\277\61\0"+
    "\1\302\67\0\1\303\5\0\1\304\2\0\1\300\1\301"+
    "\2\0\1\305\1\304\2\0\1\306\11\0\1\307\1\310"+
    "\1\302\1\0\1\311\26\0\1\312\4\0\1\302\7\0"+
    "\1\313\1\314\4\0\1\315\3\0\1\316\1\317\1\0"+
    "\1\277\1\320\2\0\1\321\1\275\1\0\1\315\7\0"+
    "\1\300\51\0\1\305\102\0\1\315\62\0\10\20\1\322"+
    "\31\20\4\0\1\20\1\0\24\20\1\0\2\20\4\0"+
    "\1\323\15\0\1\274\4\0\1\306\1\0\1\324\1\275"+
    "\1\0\1\325\1\0\1\302\5\0\1\311\1\304\10\0"+
    "\1\326\1\274\1\315\1\327\1\0\1\302\73\0\1\274"+
    "\57\0\1\300\102\0\1\312\127\0\1\330\45\0\1\306"+
    "\34\0\1\300\102\0\1\301\45\0\1\306\7\0\1\331"+
    "\4\0\1\300\6\0\1\302\102\0\1\273\41\0\42\20"+
    "\4\0\1\20\1\332\24\20\1\0\2\20\32\0\1\277"+
    "\102\0\1\306\77\0\1\302\7\0\1\276\102\0\1\315"+
    "\47\0\12\20\1\333\27\20\4\0\1\20\1\0\24\20"+
    "\1\0\2\20\5\0\1\334\4\0\1\335\13\0\1\336"+
    "\60\0\17\20\1\337\22\20\4\0\1\20\1\0\24\20"+
    "\1\0\2\20\43\0\1\305\115\0\1\276\67\0\1\277"+
    "\75\0\1\311\50\0\1\20\1\340\40\20\4\0\1\20"+
    "\1\0\24\20\1\0\2\20\4\0\2\20\1\341\37\20"+
    "\4\0\1\20\1\0\24\20\1\0\2\20\4\0\1\320"+
    "\134\0\1\276\50\0\42\20\4\0\1\20\1\342\24\20"+
    "\1\0\2\20\4\0\1\302\30\0\1\320\51\0\1\273"+
    "\157\0\1\302\25\0\24\20\1\343\15\20\4\0\1\20"+
    "\1\0\24\20\1\0\2\20\4\0\3\20\1\344\36\20"+
    "\4\0\1\20\1\0\24\20\1\0\2\20\4\0\30\20"+
    "\1\345\11\20\4\0\1\20\1\0\24\20\1\0\2\20"+
    "\4\0\1\346\41\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\4\0\25\20\1\347\14\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\21\0\1\350\1\351\4\0\1\302"+
    "\1\0\1\305\3\0\1\277\123\0\1\277\61\0\1\320"+
    "\102\0\1\315\51\0\1\325\14\0\1\352\1\315\7\0"+
    "\1\327\10\0\1\273\66\0\1\316\102\0\1\325\74\0"+
    "\1\304\72\0\1\275\146\0\1\302\106\0\1\277\102\0"+
    "\1\304\101\0\1\353\44\0\1\275\102\0\1\316\4\0"+
    "\1\275\75\0\1\273\156\0\2\354\12\0\1\355\2\0"+
    "\1\355\2\0\1\355\3\0\1\355\5\0\1\355\4\0"+
    "\3\355\2\0\1\355\3\0\1\355\4\0\1\355\12\0"+
    "\1\355\1\0\1\355\6\0\2\355\1\0\1\355\5\0"+
    "\4\20\1\356\35\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\61\0\1\357\57\0\1\357\103\0\1\357\74\0"+
    "\1\357\75\0\1\357\110\0\1\357\54\0\1\357\132\0"+
    "\1\357\75\0\1\357\6\0\1\357\120\0\1\357\61\0"+
    "\1\357\112\0\1\357\75\0\1\357\23\0\1\357\47\0"+
    "\1\357\75\0\1\357\71\0\1\357\115\0\1\357\4\0"+
    "\1\357\12\0\1\357\132\0\1\357\52\0\1\357\121\0"+
    "\1\357\23\0\1\357\14\0\1\357\137\0\1\357\50\0"+
    "\1\357\7\0\1\357\1\0\1\357\24\0\1\357\23\0"+
    "\11\20\1\360\30\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\36\0\1\357\24\0\1\357\46\0\1\357\33\0"+
    "\1\357\74\0\1\357\104\0\1\357\105\0\1\357\65\0"+
    "\1\357\70\0\1\357\22\0\1\357\46\0\1\312\64\0"+
    "\3\20\1\361\36\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\64\0\1\362\102\0\1\363\26\0\1\364\76\0"+
    "\13\20\1\365\26\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\4\0\3\20\1\366\36\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\4\0\13\20\1\367\26\20\4\0"+
    "\1\20\1\0\24\20\1\0\2\20\4\0\1\316\102\0"+
    "\4\20\1\370\35\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\4\0\30\20\1\371\11\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\36\0\1\357\4\0\1\357\60\0"+
    "\1\357\120\0\1\357\3\0\1\372\101\0\1\357\44\0"+
    "\6\20\1\373\33\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\4\0\4\20\1\374\35\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\53\0\1\375\102\0\1\376\102\0"+
    "\1\377\33\0\11\20\1\u0100\30\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\4\0\22\20\1\u0101\17\20\4\0"+
    "\1\20\1\0\24\20\1\0\2\20\4\0\14\20\1\u0102"+
    "\25\20\4\0\1\20\1\0\24\20\1\0\2\20\4\0"+
    "\6\20\1\u0103\33\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\4\0\1\357\25\0\1\357\54\0\12\20\1\u0104"+
    "\27\20\4\0\1\20\1\0\24\20\1\0\2\20\4\0"+
    "\10\20\1\u0105\31\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\33\0\1\304\105\0\1\304\50\0\1\353\102\0"+
    "\12\20\1\u0106\27\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\4\0\22\20\1\u0107\17\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\4\0\7\20\1\u0108\32\20\4\0"+
    "\1\20\1\0\24\20\1\0\2\20\4\0\10\20\1\u0109"+
    "\31\20\4\0\1\20\1\0\24\20\1\0\2\20\4\0"+
    "\6\20\1\u010a\33\20\4\0\1\20\1\0\24\20\1\0"+
    "\2\20\4\0\3\20\1\u010b\36\20\4\0\1\20\1\0"+
    "\24\20\1\0\2\20\4\0\13\20\1\u010c\26\20\4\0"+
    "\1\20\1\0\24\20\1\0\2\20\4\0\14\20\1\u010d"+
    "\25\20\4\0\1\20\1\0\24\20\1\0\2\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16482];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\126\1\2\0\1\11\3\0\20\1\1\0"+
    "\1\1\2\0\2\1\14\0\1\1\11\0\1\1\4\0"+
    "\1\1\1\0\1\1\4\0\2\1\2\0\1\1\3\0"+
    "\6\1\20\0\1\1\1\0\2\1\1\0\1\1\27\0"+
    "\1\1\10\0\1\1\3\0\3\1\1\0\5\1\4\0"+
    "\3\1\1\11\2\1\3\0\5\1\1\0\2\1\3\0"+
    "\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  XuaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 22: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 23: break;
          case 3: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 24: break;
          case 4: 
            { yybegin(YYINITIAL); return XuaTypes.SYMBOL;
            } 
            // fall through
          case 25: break;
          case 5: 
            { yybegin(YYINITIAL); return XuaTypes.DEC_CONSTANT;
            } 
            // fall through
          case 26: break;
          case 6: 
            { yybegin(YYINITIAL); return XuaTypes.STRING_CONSTANT;
            } 
            // fall through
          case 27: break;
          case 7: 
            { yybegin(YYINITIAL); return XuaTypes.OCT_CONSTANT;
            } 
            // fall through
          case 28: break;
          case 8: 
            { yybegin(YYINITIAL); return XuaTypes.BIN_CONSTANT;
            } 
            // fall through
          case 29: break;
          case 9: 
            { yybegin(YYINITIAL); return XuaTypes.HEX_CONSTANT;
            } 
            // fall through
          case 30: break;
          case 10: 
            { yybegin(YYINITIAL); return XuaTypes.BODY;
            } 
            // fall through
          case 31: break;
          case 11: 
            { yybegin(YYINITIAL); return XuaTypes.TRUE;
            } 
            // fall through
          case 32: break;
          case 12: 
            { yybegin(YYINITIAL); return XuaTypes.NULL;
            } 
            // fall through
          case 33: break;
          case 13: 
            { yybegin(YYINITIAL); return XuaTypes.SUPER;
            } 
            // fall through
          case 34: break;
          case 14: 
            { yybegin(YYINITIAL); return XuaTypes.LANGUAGE_CODE;
            } 
            // fall through
          case 35: break;
          case 15: 
            { yybegin(YYINITIAL); return XuaTypes.FALSE;
            } 
            // fall through
          case 36: break;
          case 16: 
            { yybegin(YYINITIAL); return XuaTypes.METHOD;
            } 
            // fall through
          case 37: break;
          case 17: 
            { yybegin(YYINITIAL); return XuaTypes.REQUEST;
            } 
            // fall through
          case 38: break;
          case 18: 
            { yybegin(YYINITIAL); return XuaTypes.LITERAL;
            } 
            // fall through
          case 39: break;
          case 19: 
            { yybegin(YYINITIAL); return XuaTypes.CRITERIA;
            } 
            // fall through
          case 40: break;
          case 20: 
            { yybegin(YYINITIAL); return XuaTypes.RESPONSE;
            } 
            // fall through
          case 41: break;
          case 21: 
            { yybegin(YYINITIAL); return XuaTypes.VALIDATION;
            } 
            // fall through
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
